//we are gonna use classes for a better architecture of the code
//for a better structure we use classes
const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--distance");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");
let map, mapEvent;
class App {
  #map; //both of them will become private instance properties
  #mapEvent;
  constructor() {
    this._getPosition(); //i called the function // will get executed immediately as the script loads, because is in global scope
  }
  _getPosition() {
    if (navigator.geolocation) {
      //daca navigator.geolocation exists, do what is in parenthesis
      //for API - we are going to make 2 function:one when the geo is working and one when it is not working
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        //_loadMap(alone)-is treated as a regular function call, not as a method call
        //since it s a callback function, we are not calling ourselves
        //it is the getCurrentPosition function that we ll call this callbackfunction once that it gets
        //the current position of the user.when its called this method(this._loadMap),its called like a regular function
        //in a regular function, the this keywork is set to undefined
        //the solution  is to manually bind this keyword to whatever we need.in this case is simply, this (points to the current object-_loadMap)
        //bind-this point to the current object ;will simply return a new function
        function () {
          //am facut call back la functia de loadMap prin this
          alert("Unable to determine your location. Please repeat!");
        }
      );
    }
  }
  _loadMap(position) {
    // we are gonna take the lat ang log from inspect, which is in the object coors
    const { latitude } = position.coords; //using destructuring
    const { longitude } = position.coords;

    console.log(`https://www.google.com/maps/@${latitude},${longitude}`);
    //map de la index.html; L-gives as an entry point-its a global variable it can be accesed from all the other scripts
    //13- is the zoom on the map
    //tile- the map is made from small tiles that comes from the URL
    // we can change the theme of the URL
    //how to display a map using a third party library called LEAFLET
    this.#map = L.map("map").setView([latitude, longitude], 13); //its like a property that its defined on the object itself
    //console.log(map);
    L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    L.marker([latitude, longitude])
      .addTo(this.#map)
      .bindPopup("Here you are!")
      .openPopup(); //this is for th blue marker-pop up
    //how to add multple pins
    //Handling clicks on map
    console.log(this);
    this.#map.on("click", function (mapE) {
      this.#mapEvent = mapE;
      form.classList.remove("hidden"); // ca sa nu mai fie ascuns tabelul cand dam click pe harta
      inputDistance.focus();
      //map was generated by leaflet ;on care vine de la map (o sa l folosim pe post de eventlistener method)
    });
  }
  _showForm() {}
  _toggleElevationField() {}
  _newWorkout() {}
}
const app = new App(); //we made an instance
